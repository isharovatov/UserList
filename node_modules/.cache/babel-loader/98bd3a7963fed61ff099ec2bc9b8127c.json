{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/work/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from \"react\";\nimport useGetUser from \"./Hooks/getUsers\";\nimport SuccessContent from \"./components/SuccessContent\";\nimport { useDispatch } from \"react-redux\";\nimport { postUsers } from \"./Redux/slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [response, setResponse] = useState({\n    data: [],\n    status: 'loading',\n    error: ''\n  });\n  const resp = useGetUser(30);\n  useEffect(() => {\n    if (response.status === 'loading') user();else dispatch(postUsers(response.data));\n  }, [response]);\n\n  const handelUpdate = () => {\n    if (response.status === 'loading') user();else {\n      dispatch(postUsers(response.data));\n      setResponse(...response, st);\n    }\n  };\n\n  const user = async () => {\n    setResponse(await resp);\n  };\n\n  switch (response.status) {\n    case \"error\":\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: response.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this);\n\n    case \"loading\":\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this);\n\n    case \"success\":\n      return /*#__PURE__*/_jsxDEV(SuccessContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return null;\n  }\n}\n\n_s(App, \"vmnmPyP0t1l1p0btmjZO1cWC43o=\", false, function () {\n  return [useDispatch, useGetUser];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user/Desktop/work/my-app/src/App.js"],"names":["React","useEffect","useState","useGetUser","SuccessContent","useDispatch","postUsers","App","dispatch","response","setResponse","data","status","error","resp","user","handelUpdate","st"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,eAA1B;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CACtC;AACES,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,MAAM,EAAE,SAFV;AAGEC,IAAAA,KAAK,EAAE;AAHT,GADsC,CAAxC;AAMA,QAAMC,IAAI,GAAGX,UAAU,CAAC,EAAD,CAAvB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,QAAQ,CAACG,MAAT,KAAoB,SAAxB,EAAmCG,IAAI,GAAvC,KACKP,QAAQ,CAACF,SAAS,CAACG,QAAQ,CAACE,IAAV,CAAV,CAAR;AACN,GAHQ,EAGN,CAACF,QAAD,CAHM,CAAT;;AAKA,QAAMO,YAAY,GAAG,MAAM;AACzB,QAAIP,QAAQ,CAACG,MAAT,KAAoB,SAAxB,EAAmCG,IAAI,GAAvC,KACK;AACHP,MAAAA,QAAQ,CAACF,SAAS,CAACG,QAAQ,CAACE,IAAV,CAAV,CAAR;AACAD,MAAAA,WAAW,CAAC,GAAGD,QAAJ,EAAcQ,EAAd,CAAX;AACD;AACF,GAND;;AAQA,QAAMF,IAAI,GAAG,YAAY;AACvBL,IAAAA,WAAW,CAAC,MAAMI,IAAP,CAAX;AACD,GAFD;;AAIA,UAAQL,QAAQ,CAACG,MAAjB;AACE,SAAK,OAAL;AACE,0BAAO;AAAA,kBAAMH,QAAQ,CAACI;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;;AACF,SAAK,SAAL;AACE,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;;AACF,SAAK,SAAL;AACE,0BAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAAP;;AACF;AACE,aAAO,IAAP;AARJ;AAUD;;GArCuBN,G;UACLF,W,EAOJF,U;;;KARSI,G","sourcesContent":["import { React, useEffect, useState } from \"react\";\nimport useGetUser from \"./Hooks/getUsers\";\nimport SuccessContent from \"./components/SuccessContent\";\nimport { useDispatch } from \"react-redux\";\nimport { postUsers } from \"./Redux/slice\"\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const [response, setResponse] = useState(\n    {\n      data: [],\n      status: 'loading',\n      error: '',\n    });\n  const resp = useGetUser(30);\n\n  useEffect(() => {\n    if (response.status === 'loading') user();\n    else dispatch(postUsers(response.data));\n  }, [response]);\n\n  const handelUpdate = () => {\n    if (response.status === 'loading') user();\n    else {\n      dispatch(postUsers(response.data));\n      setResponse(...response, st)\n    }\n  } \n\n  const user = async () => {\n    setResponse(await(resp))\n  };\n\n  switch (response.status) {\n    case \"error\":\n      return <div>{response.error}</div>;\n    case \"loading\":\n      return <div>loader</div>;\n    case \"success\":\n      return <SuccessContent />;\n    default:\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}