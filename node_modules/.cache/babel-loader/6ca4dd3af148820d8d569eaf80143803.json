{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport getUsers from \"../Redux/slice\";\n\nconst useGetUser = async url => {\n  _s();\n\n  // const [status, setStatus] = useState();\n  // const [error, setError] = useState();\n  // const [resp, setResp] = useState();\n  // useEffect(() => {\n  //   const getUsers = async () => {\n  //   try{\n  //     let response = await fetch(url);\n  //     let json = await response.json();\n  //     setResp(json.results);\n  //     setStatus(\"success\");\n  //   }\n  //    catch(error) {\n  //     setError(error);\n  //     setStatus(\"error\");\n  //   }\n  // }\n  // getUsers();\n  // }, []);\n  // console.log('resp', resp);\n  // return { resp, status, error };\n  const dispatch = useDispatch();\n  const [response, setResponse] = useState(null); // const ref = useRef(null)\n  // ref.current = response\n\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const res = await fetch(url);\n        const json = await res.json();\n        setTimeout(() => {\n          setResponse(json.results);\n          setIsLoading(false);\n        }, 2000);\n      } catch (error) {\n        setTimeout(() => {\n          setError(error);\n          setIsLoading(false);\n        }, 0);\n      }\n    };\n\n    fetchData();\n  }, []); // console.log(response, error, isLoading);\n\n  return {\n    response,\n    error,\n    isLoading\n  };\n};\n\n_s(useGetUser, \"RSOAva7X4pD7OJh2Rj++VSiyn+E=\", false, function () {\n  return [useDispatch];\n});\n\nexport default useGetUser;","map":{"version":3,"sources":["/Users/user/Desktop/work/my-app/src/Hooks/getUsers.js"],"names":["useEffect","useRef","useState","useDispatch","getUsers","useGetUser","url","dispatch","response","setResponse","error","setError","isLoading","setIsLoading","fetchData","res","fetch","json","setTimeout","results"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,MAAMC,UAAU,GAAG,MAAOC,GAAP,IAAe;AAAA;;AAChC;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,IAAD,CAAxC,CA5BgC,CA6BhC;AACA;;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,SAAS,GAAG,YAAY;AAC5BD,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAME,GAAG,GAAG,MAAMC,KAAK,CAACV,GAAD,CAAvB;AACA,cAAMW,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACAC,QAAAA,UAAU,CAAC,MAAM;AACfT,UAAAA,WAAW,CAACQ,IAAI,CAACE,OAAN,CAAX;AACAN,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,SAHS,EAGP,IAHO,CAAV;AAID,OAPD,CAOE,OAAOH,KAAP,EAAc;AACdQ,QAAAA,UAAU,CAAC,MAAM;AACfP,UAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,SAHS,EAGP,CAHO,CAAV;AAID;AACF,KAhBD;;AAkBAC,IAAAA,SAAS;AACV,GApBQ,EAoBN,EApBM,CAAT,CAlCgC,CAwDhC;;AAEA,SAAO;AAAEN,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CA3DD;;GAAMP,U;UA2BaF,W;;;AAkCnB,eAAeE,UAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport getUsers from \"../Redux/slice\";\n\nconst useGetUser = async (url) => {\n  // const [status, setStatus] = useState();\n  // const [error, setError] = useState();\n  // const [resp, setResp] = useState();\n\n  // useEffect(() => {\n\n  //   const getUsers = async () => {\n  //   try{\n  //     let response = await fetch(url);\n  //     let json = await response.json();\n  //     setResp(json.results);\n  //     setStatus(\"success\");\n  //   }\n  //    catch(error) {\n  //     setError(error);\n  //     setStatus(\"error\");\n  //   }\n  // }\n  // getUsers();\n\n  // }, []);\n\n  // console.log('resp', resp);\n\n  // return { resp, status, error };\n\n  const dispatch = useDispatch();\n  const [response, setResponse] = useState(null);\n  // const ref = useRef(null)\n  // ref.current = response\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const res = await fetch(url);\n        const json = await res.json();\n        setTimeout(() => {\n          setResponse(json.results);\n          setIsLoading(false);\n        }, 2000);\n      } catch (error) {\n        setTimeout(() => {\n          setError(error);\n          setIsLoading(false);\n        }, 0);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // console.log(response, error, isLoading);\n\n  return { response, error, isLoading };\n};\n\nexport default useGetUser;\n"]},"metadata":{},"sourceType":"module"}