{"ast":null,"code":"import { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport getUsers from \"../Redux/slice\";\n\nconst useGetUser = async url => {\n  // const [status, setStatus] = useState();\n  // const [error, setError] = useState();\n  // const [resp, setResp] = useState();\n  // useEffect(() => {\n  //   const getUsers = async () => {\n  //   try{\n  //     let response = await fetch(url);\n  //     let json = await response.json();\n  //     setResp(json.results);\n  //     setStatus(\"success\");\n  //   }\n  //    catch(error) {\n  //     setError(error);\n  //     setStatus(\"error\");\n  //   }\n  // }\n  // getUsers();\n  // }, []);\n  // console.log('resp', resp);\n  // return { resp, status, error };\n  // const dispatch = useDispatch();\n  // const [response, setResponse] = useState(null);\n  // // const ref = useRef(null)\n  // // ref.current = response\n  // const [error, setError] = useState(null);\n  // const [isLoading, setIsLoading] = useState(false);\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     setIsLoading(true);\n  //     try {\n  //       const res = await fetch(url);\n  //       const json = await res.json();\n  //       setTimeout(() => {\n  //         setResponse(json.results);\n  //         setIsLoading(false);\n  //       }, 2000);\n  //     } catch (error) {\n  //       setTimeout(() => {\n  //         setError(error);\n  //         setIsLoading(false);\n  //       }, 0);\n  //     }\n  //   };\n  //   fetchData();\n  // }, []);\n  // console.log(response, error, isLoading);\n  return {\n    response,\n    error,\n    isLoading\n  };\n};\n\nexport default useGetUser;","map":{"version":3,"sources":["/Users/user/Desktop/work/my-app/src/Hooks/getUsers.js"],"names":["useEffect","useRef","useState","useDispatch","getUsers","useGetUser","url","response","error","isLoading"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,MAAMC,UAAU,GAAG,MAAOC,GAAP,IAAe;AAChC;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA,SAAO;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAP;AACD,CA3DD;;AA6DA,eAAeJ,UAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport getUsers from \"../Redux/slice\";\n\nconst useGetUser = async (url) => {\n  // const [status, setStatus] = useState();\n  // const [error, setError] = useState();\n  // const [resp, setResp] = useState();\n\n  // useEffect(() => {\n\n  //   const getUsers = async () => {\n  //   try{\n  //     let response = await fetch(url);\n  //     let json = await response.json();\n  //     setResp(json.results);\n  //     setStatus(\"success\");\n  //   }\n  //    catch(error) {\n  //     setError(error);\n  //     setStatus(\"error\");\n  //   }\n  // }\n  // getUsers();\n\n  // }, []);\n\n  // console.log('resp', resp);\n\n  // return { resp, status, error };\n\n  // const dispatch = useDispatch();\n  // const [response, setResponse] = useState(null);\n  // // const ref = useRef(null)\n  // // ref.current = response\n  // const [error, setError] = useState(null);\n  // const [isLoading, setIsLoading] = useState(false);\n\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     setIsLoading(true);\n\n  //     try {\n  //       const res = await fetch(url);\n  //       const json = await res.json();\n  //       setTimeout(() => {\n  //         setResponse(json.results);\n  //         setIsLoading(false);\n  //       }, 2000);\n  //     } catch (error) {\n  //       setTimeout(() => {\n  //         setError(error);\n  //         setIsLoading(false);\n  //       }, 0);\n  //     }\n  //   };\n\n  //   fetchData();\n  // }, []);\n\n  // console.log(response, error, isLoading);\n\n  return { response, error, isLoading };\n};\n\nexport default useGetUser;\n"]},"metadata":{},"sourceType":"module"}